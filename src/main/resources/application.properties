spring.application.name=biblioteca

# Configura\uFFFD\uFFFDes do DataSource (MySQL Local)
# ALTERE ESTAS LINHAS:
spring.datasource.url=jdbc:mysql://localhost:3306/biblioteca?serverTimezone=UTC&createDatabaseIfNotExist=true
# - localhost:3306 : Se o MySQL estiver rodando na sua m\uFFFDquina local na porta padr\uFFFDo.
# - nome_do_seu_banco_local: Substitua pelo nome do banco de dados que voc\uFFFD criou (ex: biblioteca_local).
# - createDatabaseIfNotExist=true : Opcional. Se o banco n\uFFFDo existir, tentar\uFFFD cri\uFFFD-lo. Remova se n\uFFFDo quiser ou n\uFFFDo tiver permiss\uFFFDo.

spring.datasource.username=root
# - seu_usuario_mysql_local: Substitua pelo nome de usu\uFFFDrio do seu MySQL local (ex: root, ou um usu\uFFFDrio que voc\uFFFD criou).

spring.datasource.password=toor
# - sua_senha_mysql_local: Substitua pela senha do usu\uFFFDrio acima. Se for o root e n\uFFFDo tiver senha (n\uFFFDo recomendado), deixe em branco, mas o ideal \uFFFD ter senha.

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
  # Esta linha geralmente permanece a mesma

# Configura\uFFFD\uFFFDo do JPA (Java Persistence API)
spring.jpa.hibernate.ddl-auto=update
# - update: Tentar\uFFFD criar/atualizar as tabelas no seu banco local com base nas suas entidades.
#   Isso \uFFFD \uFFFDtil para desenvolvimento local. Para o primeiro uso com um banco vazio, 'create' tamb\uFFFDm funcionaria,
#   mas 'update' \uFFFD mais seguro se voc\uFFFD j\uFFFD tiver dados e fizer altera\uFFFD\uFFFDes nas entidades.

spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
  # Ou MySQLDialect se seu MySQL local for vers\uFFFDo 5.x

# Configura\uFFFD\uFFFDo para mostrar as queries SQL (\uFFFDtil para debug)
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Configura\uFFFD\uFFFDes do HikariCP (Pool de Conex\uFFFDes) - PARA MYSQL LOCAL
# Com MySQL local, os timeouts agressivos de provedores DBaaS geralmente n\uFFFDo s\uFFFDo um problema.
# Voc\uFFFD pode come\uFFFDar com os padr\uFFFDes do Hikari ou usar valores mais relaxados.
# O wait_timeout padr\uFFFDo do MySQL local costuma ser 8 horas (28800 segundos).
spring.datasource.hikari.connection-timeout=30000
  # 30 segundos
spring.datasource.hikari.idle-timeout=600000
  # 10 minutos
spring.datasource.hikari.max-lifetime=1800000
  # 30 minutos (padr\uFFFDo Hikari, geralmente OK com wait_timeout padr\uFFFDo do MySQL local)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
  # Manter pelo menos 2 conex\uFFFDes ociosas
spring.datasource.hikari.pool-name=BibliotecaHikariPoolLocal
# spring.datasource.hikari.connection-test-query=SELECT 1 # Geralmente n\uFFFDo necess\uFFFDrio para MySQL local padr\uFFFDo

spring.web.resources.static-locations=classpath:/static/
